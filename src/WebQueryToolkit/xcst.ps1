
$ErrorActionPreference = "Stop"
Push-Location (Split-Path $script:MyInvocation.MyCommand.Path)

function GeneratePackages {

   $startDirectory = Get-Item .
   $pkgFileExtension = "xcst"
   $nugetPackages = Resolve-Path ..\..\packages

   # AssemblyResolve is used to enable loading **newer versions** of Xcst.Compiler's dependencies
   $onAssemblyResolve = [ResolveEventHandler] {
      param($sender, $e)

      $assemblyName = $e.Name.Split(',')[0]
      $assemblyPath = "$nugetPackages\$assemblyName.*\lib\net46\$assemblyName.dll"

      if ($assemblyName.StartsWith("saxon9he") -or $assemblyName.StartsWith("IKVM.")) {
         $assemblyPath = "$nugetPackages\Saxon-HE.*\lib\net40\$assemblyName.dll"

      } elseif ($assemblyName.StartsWith("Newtonsoft.Json")) {
         $assemblyPath = "$nugetPackages\$assemblyName.*\lib\net45\$assemblyName.dll"
      }

      if (-not (Test-Path $assemblyPath)) {
         return $null
      }

      return [Reflection.Assembly]::LoadFrom((Resolve-Path $assemblyPath))
   }

   [AppDomain]::CurrentDomain.add_AssemblyResolve($onAssemblyResolve)

   try {
      Add-Type -Path $nugetPackages\Xcst.Compiler.*\lib\net46\Xcst.Compiler.dll

      $compilerFactory = New-Object Xcst.Compiler.XcstCompilerFactory
      $compilerFactory.EnableExtensions = $true

      # Enable "application" extension
      $appExtension = [Reflection.Assembly]::LoadFrom((Resolve-Path $nugetPackages\Xcst.AspNet.Extension.*\lib\net46\Xcst.AspNet.Extension.dll))
      $compilerFactory.RegisterExtensionsForAssembly($appExtension)

@"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
"@

      foreach ($file in ls $startDirectory.FullName *.$pkgFileExtension -Recurse) {

         if ($file.Name[0] -eq '_') {
            continue
         }

         $compiler = $compilerFactory.CreateCompiler()
         $compiler.PackagesLocation = $startDirectory.FullName
         $compiler.PackageFileExtension = $pkgFileExtension
         $compiler.NamedPackage = $true
         $compiler.IndentChars = "   "

         $xcstResult = $compiler.Compile((New-Object Uri $file.FullName))

         $xcstResult.CompilationUnits | %{ write $_ }
      }
   } finally {
      # Detach the event handler (not detaching can lead to stack overflow issues when closing PS)
      [AppDomain]::CurrentDomain.remove_AssemblyResolve($onAssemblyResolve)
   }
}

try {
   GeneratePackages | Out-File xcst.generated.cs -Encoding utf8
} finally {
   Pop-Location
}
