<?xml version="1.0" encoding="utf-8"?>
<!--
 Copyright 2022 Max Toro Q.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<package name='WebQueryToolkit.Extension.ExtensionPackage' version='1.0' language='C#' visibility='public'
   xmlns='http://maxtoroq.github.io/XCST'
   xmlns:code='https://maxtoroq.github.io/XCST/code'
   xmlns:src='https://maxtoroq.github.io/XCST/compiled'>

   <import-namespace ns='System.Linq'/>
   <import-namespace ns='System.Xml.Linq'/>

   <variable name='ExtensionNamespace' visibility='public'>http://maxtoroq.github.io/WebQueryToolkit</variable>
   <variable name='wqt' value='ExtensionNamespace' as='XNamespace'/>
   <variable name='c' as='XNamespace'>http://maxtoroq.github.io/XCST</variable>

   <template name='src:type-attribute-extra' visibility='public'>
      <param name='el' as='XElement' required='yes'/>

      <if test='el.Attribute(wqt + "queryable") is { } attr
            &amp;&amp; xcst_boolean(attr)'>
         <call-template name='web-queryable-attribute'>
            <with-param name='el' value='el'/>
         </call-template>
      </if>
   </template>

   <template name='web-queryable-attribute'>
      <param name='el' as='XElement' required='yes'/>
      <param name='modules' as='XElement[]' tunnel='yes' required='yes'/>

      <variable name='defs' value='select(modules.Reverse(), wqt + "web-query")'/>

      <code:attribute>
         <code:type-reference name='WebQueryable' namespace='WebQueryToolkit'/>
         <code:initializer>
            <apply-templates value='el.Attribute(wqt + "order-by")' mode='setter'/>
            <apply-templates value='attributes(defs, "top").FirstOrDefault()' mode='setter'/>
            <apply-templates value='attributes(defs, "top-max").FirstOrDefault()' mode='setter'/>
            <call-template name='array-setter'>
               <with-param name='name'>FilterAllowedProperties</with-param>
               <with-param name='values' value='select(el, c + "member")
                  .Where(p => p.Attribute(wqt + "filterable") is { } filterableAttr
                     &amp;&amp; xcst_boolean(filterableAttr))
                  .Select(p => xcst_name(p.Attribute("name")!))
                  .ToArray()'/>
            </call-template>
            <call-template name='array-setter'>
               <with-param name='name'>OrderByAllowedProperties</with-param>
               <with-param name='values' value='select(el, c + "member")
                  .Where(p => p.Attribute(wqt + "sortable") is { } sortableAttr
                     &amp;&amp; xcst_boolean(sortableAttr))
                  .Select(p => xcst_name(p.Attribute("name")!))
                  .ToArray()'/>
            </call-template>
            <apply-templates value='attributes(defs, "order-by-parameter-allowed").FirstOrDefault()' mode='setter'/>
            <apply-templates value='attributes(defs, "skip-parameter-allowed").FirstOrDefault()' mode='setter'/>
            <apply-templates value='attributes(defs, "top-parameter-allowed").FirstOrDefault()' mode='setter'/>
         </code:initializer>
      </code:attribute>
   </template>

   <template match='XAttribute attr &amp;&amp; attr.Name == wqt + "order-by"' mode='setter'>
      <code:member-initializer name='OrderBy'>
         <code:string verbatim='true'>
            <value-of value='attr.Value'/>
         </code:string>
      </code:member-initializer>
   </template>

   <template match='XAttribute attr &amp;&amp; attr.Name == "order-by-parameter-allowed"' mode='setter'>
      <code:member-initializer name='OrderByParameterAllowed'>
         <code:bool value='{fn_string(xcst_boolean(attr))}'/>
      </code:member-initializer>
   </template>

   <template match='XAttribute attr &amp;&amp; attr.Name == "skip-parameter-allowed"' mode='setter'>
      <code:member-initializer name='SkipParameterAllowed'>
         <code:bool value='{fn_string(xcst_boolean(attr))}'/>
      </code:member-initializer>
   </template>

   <template match='XAttribute attr &amp;&amp; attr.Name == "top-parameter-allowed"' mode='setter'>
      <code:member-initializer name='TopParameterAllowed'>
         <code:bool value='{fn_string(xcst_boolean(attr))}'/>
      </code:member-initializer>
   </template>

   <template match='XAttribute attr &amp;&amp; attr.Name == "top"' mode='setter'>
      <code:member-initializer name='Top'>
         <code:int value='{fn_string(xcst_integer(attr))}'/>
      </code:member-initializer>
   </template>

   <template match='XAttribute attr &amp;&amp; attr.Name == "top-max"' mode='setter'>
      <code:member-initializer name='TopMax'>
         <code:int value='{fn_string(xcst_integer(attr))}'/>
      </code:member-initializer>
   </template>

   <template name='array-setter'>
      <param name='name' as='string' required='yes'/>
      <param name='values' as='string[]' required='yes'/>

      <if test='!fn_empty(values)'>
         <code:member-initializer name='{name}'>
            <code:new-array>
               <code:type-reference name='String' namespace='System'/>
               <code:collection-initializer>
                  <for-each name='val' in='values'>
                     <code:string verbatim='true'>
                        <value-of value='val'/>
                     </code:string>
                  </for-each>
               </code:collection-initializer>
            </code:new-array>
         </code:member-initializer>
      </if>
   </template>


   <!-- ## Data Types -->

   <function name='xcst_boolean' as='bool'>
      <param name='node' as='XObject'/>

      <variable name='str' value='xcst_non_string(node)'/>

      <choose>
         <when test='str is "yes" or "true" or "1"'>
            <return value='true'/>
         </when>
         <when test='str is "no" or "false" or "0"'>
            <return value='false'/>
         </when>
         <otherwise>
            <message terminate='yes' error-code='XTSE0020' error-data='src_error_object(node)' expand-text='yes' transform-text='trim'>
               Invalid boolean for '{fn_name(node)}'.
            </message>
         </otherwise>
      </choose>
   </function>

   <function name='xcst_integer' as='int'>
      <param name='node' as='XObject'/>

      <variable name='str' value='xcst_non_string(node)'/>

      <choose>
         <when test='int.TryParse(str, out var val)'>
            <return value='val'/>
         </when>
         <otherwise>
            <message terminate='yes' error-code='XTSE0020' error-data='src_error_object(node)' expand-text='yes' transform-text='trim'>
               Invalid value for '{fn_name(node)}'.
            </message>
         </otherwise>
      </choose>
   </function>

   <function name='xcst_name' as='string'>
      <param name='node' as='XObject'/>

      <variable name='str' value='xcst_non_string(node)'/>
      <return value='str'/>
   </function>

   <function name='xcst_non_string' as='string'>
      <param name='node' as='XObject'/>

      <variable name='str' value='trim(fn_string(node))'/>

      <if test='!(str.Length > 0)'>
         <message terminate='yes' error-code='XTSE0020' error-data='src_error_object(node)' expand-text='yes' transform-text='trim'>
            Value of '{fn_name(node)}' must be a non-empty string.
         </message>
      </if>

      <return value='str'/>
   </function>

   <function name='src_error_object' as='object'>
      <param name='node' as='XObject'/>

      <return value='ErrorData(node)'/>
   </function>

</package>
